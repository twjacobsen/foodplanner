{
  "name": "browserify",
  "version": "1.2.9",
  "description": "Browser-side require() for js directories and npm modules",
  "main": "./index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-browserify.git"
  },
  "keywords": [
    "browser",
    "require",
    "middleware",
    "bundle",
    "npm",
    "coffee",
    "javascript"
  ],
  "dependencies": {
    "detective": ">=0.0.1 <0.1",
    "resolve": ">=0.0.4 <0.1",
    "nub": "0.0.x",
    "commondir": "0.0.x",
    "coffee-script": ">=1.1.1 <1.2"
  },
  "devDependencies": {
    "connect": ">=1.4.1 <1.5",
    "hashish": ">=0.0.2 <0.1",
    "traverse": ">=0.3.8 <0.4",
    "backbone": ">=0.3.3",
    "dnode": ">=0.7.1 <0.8",
    "jade": "=0.10.4",
    "seq": "=0.3.3",
    "expresso": "=0.7.x",
    "jquery-browserify": "*",
    "jsdom": "=0.2.x"
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "scripts": {
    "test": "expresso"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4.0"
  },
  "readme": "Browserify\n==========\n\nBrowser-side require() for your node modules and npm packages\n\nJust point a javascript file or two at browserify and it will walk the AST to\nread all your `require()`s recursively. The resulting bundle has everything you\nneed, including pulling in libraries you might have installed using npm!\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n\n* Relative `require()`s work browser-side just as they do in node.\n\n* Coffee script gets automatically compiled and you can register custom\n  compilers of your own!\n\n* Browser-versions of certain core node modules such as `path`, `events`, and\n  `vm` are included as necessary automatically.\n\nexamples\n========\n\nsimple example\n--------------\n\nserver.js\n\n````javascript\nvar connect = require('connect');\nvar server = connect.createServer();\n\nserver.use(connect.static(__dirname));\nserver.use(require('browserify')({\n    require : __dirname + '/js/foo.js',\n    filter : require('uglify-js'), // minifiers are super easy!\n}));\n\nserver.listen(9797);\nconsole.log('Listening on 9797...');\n````\n\njs/foo.js\n\n````javascript\nvar bar = require('./bar');\nvar baz = require('./baz');\n\nmodule.exports = function (x) {\n    return x * bar.coeff(x) + baz.wowsy(x);\n};\n````\n\njs/bar.js\n\n````javascript\nexports.coeff = function (x) {\n    return Math.log(x) / Math.log(2) + 1;\n};\n````\n\njs/baz.coffee\n\n````coffeescript\nexports.wowsy = (beans) ->\n    beans * 3 - 2\n````\n\nindex.html\n\n````html\n<html>\n<head>\n    <script type=\"text/javascript\" src=\"/browserify.js\"></script>\n    <script type=\"text/javascript\">\n        var foo = require('./foo');\n        \n        window.onload = function () {\n            document.getElementById('result').innerHTML = foo(100);\n        };\n    </script>\n</head>\n<body>\n    foo =\n    <span style='font-family: monospace' id=\"result\"></span>\n</body>\n</html>\n````\n\nnpm example\n-----------\n\nserver.js\n\n````javascript\nvar connect = require('connect');\nvar server = connect.createServer();\n\nserver.use(connect.static(__dirname));\nserver.use(require('browserify')({\n    mount : '/browserify.js',\n    require : 'traverse',\n}));\n\nserver.listen(4040);\nconsole.log('Listening on 4040...');\n````\n\nindex.html\n\n````html\n<html>\n<head>\n    <script type=\"text/javascript\" src=\"/browserify.js\"></script>\n    <script type=\"text/javascript\">\n        var Traverse = require('traverse');\n        var obj = [ 5, 6, -3, [ 7, 8, -2, 1 ], { f : 10, g : -13 } ];\n        Traverse(obj).forEach(function (x) {\n            if (x < 0) this.update(x + 128);\n        });\n        \n        window.onload = function () {\n            document.getElementById('result').innerHTML\n                = JSON.stringify(obj);\n        };\n    </script>\n</head>\n<body>\n    foo =\n    <span style='font-family: monospace' id=\"result\"></span>\n</body>\n</html>\n````\n\nNote that you could also put the body from the second `<script>` tag into a\njavascript file of its own and pass that file to the `entry` field. Such an\naction would render the `require : 'traverse'` in server.js unnecessary since\nbrowserify hunts down `require()`s from the AST.\n\nmethods\n=======\n\n````javascript\nvar browserify = require('browserify');\n````\n\nvar b = browserify(opts={})\n---------------------------\n\nReturn a middleware with attached methods that will host up a browserified\nscript at `opts.mount` or `\"/browserify.js\"` if unspecified.\n\n`opts` may also contain these fields:\n\n* require - calls `b.require()`\n* ignore - calls `b.ignore()`\n* entry - calls `b.addEntry()`\n* filter - registers a \"post\" extension using `b.register()`\n* watch - set watches on files, see below\n\nIf `opts` is a string, it is interpreted as a `require` value.\n\nAny query string after `opts.mount` will be ignored.\n\n### watch :: Boolean or Object\n\nSet watches on files and automatically rebundle when a file changes.\n\nThis option defaults to false. If `opts.watch` is set to true, default watch\narguments are assumed or you can pass in an object to pass along as the second\nparameter to `fs.watchFile()`.\n\nb.bundle()\n----------\n\nReturn the bundled source as a string.\n\nb.require(file)\n---------------\n\nRequire a file or files for inclusion in the bundle.\n\nIf `file` is an array, require each element in it.\n\nIf `file` is a non-array object, map an alias to a package name.\nFor instance to be able to map `require('jquery')` to the jquery-browserify\npackage, you can do:\n\n````javascript\nb.require({ jquery : 'jquery-browserify' })\n````\n\nand the same thing in middleware-form:\n\n````javascript\nbrowserify({ require : { jquery : 'jquery-browserify' } })\n````\n\nTo mix alias objects with regular requires you could do:\n\n````javascript\nbrowserify({ require : [ 'seq', { jquery : 'jquery-browserify' }, 'traverse' ])\n````\n\nIn practice you won't need to `b.require()` very many files since all the\n`require()`s are read from each file that you require and automatically\nincluded.\n\nb.ignore(file)\n--------------\n\nOmit a file or files from being included by the AST walk to hunt down\n`require()` statements.\n\nb.addEntry(file)\n----------------\n\nAppend a file to the end of the bundle and execute it without having to\n`require()` it.\n\nSpecifying an entry point will let you `require()` other modules without having\nto load the entry point in a `<script>` tag yourself.\n\nIf entry is an Array, concatenate these files together and append to the end of\nthe bundle.\n\nb.filter(fn)\n------------\n\nTransform the source using the filter function `fn(src)`. The return value of\n`fn` should be the new source.\n\nb.register(ext, fn)\n-------------------\n\nRegister a handler to wrap extensions.\n\nWrap every file matching the extension `ext` with the function `fn`.\n\nFor every `file` included into the bundle `fn` gets called for matching file\ntypes as `fn.call(b, body, file)` for the bundle instance `b` and the file\ncontent string `body`. `fn` should return the new wrapped contents.\n\nIf `ext` is unspecified, execute the wrapper for every file.\n\nIf `ext` is 'post', execute the wrapper on the entire bundle.\n\nIf `ext` is 'pre', call the wrapper function with the bundle object before the\nsource is generated.\n\nIf `ext` is an object, pull the extension from `ext.extension` and the wrapper\nfunction `fn` from `ext.wrapper`. This makes it easy to write plugins like\n[fileify](https://github.com/substack/node-fileify).\n\nCoffee script support is just implemented internally as a `.register()`\nextension:\n\n````javascript\nb.register('.coffee', function (body) {\n    return coffee.compile(body);\n});\n````\n\nb.use(fn)\n---------\n\nUse a middleware plugin, `fn`. `fn` is called with the instance object `b`.\n\nb.prepend(content)\n------------------\n\nPrepend unwrapped content to the beginning of the bundle.\n\nb.append(content)\n-----------------\n\nAppend unwrapped content to the end of the bundle.\n\nb.alias(to, from)\n-----------------\n\nAlias a package name from another package name.\n\nb.modified\n----------\n\nContains a Date object with the time the bundle was last modified. This field is\nuseful in conjunction with the `watch` field described in the `browserify()` to\ngenerate unique `<script>` `src` values to force script reloading.\n\npackage.json\n============\n\nIn order to resolve main files for projects, the package.json \"main\" field is\nread.\n\nIf a package.json has a \"browserify\" field, you can override the standard \"main\"\nbehavior with something special just for browsers.\n\nThe \"browserify\" field can be a string that points to the browser-specific\n\"main\" file or it can be an object with a \"main\" field in it.\n\ncompatability\n=============\n\nprocess\n-------\n\nBrowserify exports a faux `process` object with these attributes:\n\n* nextTick(fn) - does setTimeout(fn, 0)\n* title - set to 'browser' for browser code, 'node' in regular node code\n\nrequire('events')\n-----------------\n\nYou can `require('events').EventEmitter` just like in node.js code.\n\nrequire('vm')\n-------------\n\nAll the goodness of node's `require('vm')` has been emulated with iframe\ntrickery and `eval()` hacks.\n\nrequire('path')\n---------------\n\nThe posix functions from the `path` module have been included except for\n`exists()` and `existsSync()`. Just `require('path')`!\n\n__dirname\n---------\n\nThe faux directory name, scrubbed of true directory information so as not to\nexpose your filesystem organization.\n\n__filename\n----------\n\nThe faux file path, scrubbed of true path information so as not to expose your\nfilesystem organization.\n\nprotips\n=======\n\n* `npm install jquery-browserify` to have npm and browserify handle your jquery\ndeployment!\n\nread more\n=========\n\n[browserify: browser-side require() for your node.js](http://substack.net/posts/24ab8c)\n",
  "_id": "browserify@1.2.9",
  "_from": "browserify@>=1.2.4 <1.3"
}
