{
  "name": "jadeify",
  "version": "0.3.2",
  "description": "Browserify middleware to render jade templates browser-side",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example"
  },
  "browserify": "empty.js",
  "dependencies": {
    "fileify": "0.3.x",
    "jade": "0.11.x",
    "traverse": ">=0.3.5 <0.4",
    "deck": "0.0.x",
    "jquery-browserify": "1.6.1",
    "browserify": ">=1.2.4 <1.3",
    "seq": ">=0.2.5 <0.3"
  },
  "scripts": {
    "install": "node scripts/generate.js"
  },
  "devDependencies": {
    "jsdom": "0.2.x",
    "expresso": "0.7.x"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-jadeify.git"
  },
  "keywords": [
    "browserify",
    "bundle",
    "middleware",
    "jade",
    "template"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "jadeify\n=======\n\nBrowserify middleware for browser-side jade templates.\n\nusage\n=====\n\nFor some expresso/connect/etc application `app`:\n\n````javascript\nvar browserify = require('browserify');\nvar jadeify = require('jadeify');\n\nvar bundle = browserify()\n    .use(jadeify(__dirname + '/views'))\n    .addEntry(__dirname + '/main.js')\n;\napp.use(bundle);\n````\n\nThen in your browser-side main.js entry point you can use `jadeify()`:\n\n````javascript\nvar $ = require('jquery');\nvar jadeify = require('jadeify');\n\nvar msg = jadeify('msg.jade', {\n    title : 'foo',\n    body : 'bar baz quux'\n}).appendTo($('#messages'));\n````\n\n[See here](https://github.com/substack/node-jadeify/tree/master/example/simple)\nfor a more complete example.\n\nserver-side methods\n===================\n\njadeify(viewdir, opts or extension)\n-----------------------------------\n\nUse templates from `viewdir` or `opts.views` with file extension `extension` or\n`opts.extension` or otherwise any file.\n\nThe options are passed along to\n[fileify](http://github.com/substack/node-fileify).\n\nOne thing you might want to pass along to fileify is the watch parameter to\nupdate the jadeified view files when they change on disk without restarting the\nserver.\n\nbrowser-side methods\n====================\n\njadeify(templateFile, vars={})\n------------------------------\n\nRender `templateFile` with `vars` local variables.\n\nThe `vars` parameter undergoes a deep traversal to find HTMLElement and jquery\nhandles in order to stringify their outerHTMLs so you can just `!{varname}` to\ninsert elements into a template.\n\nReturns an HTML DOM element wrapped with jquery.\n\ntemplate methods\n================\n\nThese methods are available to your template logic.\n\n$ (jquery handle)\n-----------------\n\nThe jquery function is passed in as `$`.\n\ninstallation\n============\n\nWith [npm](http://npmjs.org), do:\n\n    npm install jadeify\n\nlicense\n=======\n\nMIT/X11\n",
  "_id": "jadeify@0.3.2",
  "_from": "jadeify"
}
